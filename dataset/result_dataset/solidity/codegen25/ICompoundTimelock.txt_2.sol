pragma solidity ^0.8.20;
interface ICompoundTimelock {
    event NewAdmin(address);
    event NewPendingAdmin(address);
    event NewDelay(uint256);
    event CancelTransaction(bytes32);
    event ExecuteTransaction(bytes32);
    event QueueTransaction(bytes32);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event QueuedTransactions(bytes32[]);
    event GRACE_PERIOD();
    event MINIMUM_DELAY();
    event MAXIMUM_DELAY();
    event Admin(address);
    event PendingAdmin(address);
    event Delay(uint256);
    event QueuedTransaction(bytes32);
    event Receive(address, uint256);
    event Deposit(address, uint256);
    event GRACE_PERIOD();
    event Admin(address);
    event PendingAdmin(address);
    event Admin(address);
    event PendingTransaction(address);
    event PendingTransaction(address);
    event PendingTransaction();
    event PendingTransaction(address);
    event;
    event;
    event;
    event;
    event;
    event