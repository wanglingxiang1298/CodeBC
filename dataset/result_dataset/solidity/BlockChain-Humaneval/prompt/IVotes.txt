Generate smart contract code that meets the following requirements:
 @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.
 @dev The signature used has expired.
 @dev Emitted when an account changes their delegate.
 @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.
 @dev Returns the current amount of votes that `account` has.
 @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block.
 @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote.
 @dev Returns the delegate that `account` has chosen.
 @dev Delegates votes from the sender to `delegatee`.
 @dev Delegates votes from signer to `delegatee`.
Please give the contract code