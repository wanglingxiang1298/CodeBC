Generate smart contract code that meets the following requirements:
Programming with solidity ^ version number 0.8.20
Implementing a contract instance called CompTimelock.This CompTimelock contract implements a timelock mechanism that allows transactions to be queued and executed at a future time.
The contract has the following key components:
Events to log state changes and transaction executions
Constants for grace period and delay thresholds
Admin and pending admin roles for authorization
Transaction queue stored as a mapping
Functions for queueing, cancelling and executing transactions
The following functions need to be completed. The function names and functions are listed below:
constructor(): Initializes admin and delay on deployment
setDelay(): Sets a new minimum delay period
acceptAdmin(): Transfers admin rights to pending admin
setPendingAdmin(): Sets a new pending admin address
queueTransaction(): Queues a new transaction for future execution
cancelTransaction(): Cancels a previously queued transaction
executeTransaction(): Executes a previously queued transaction if valid
getBlockTimestamp(): Gets the current block timestamp
Only the admin can queue, cancel or execute transactions. Transactions must be queued with a delay and can only be executed within the grace period window after their eta. This ensures important actions are delayed and decentralized control over time.
Please give the contract code