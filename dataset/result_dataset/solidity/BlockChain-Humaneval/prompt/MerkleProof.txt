Generate smart contract code that meets the following requirements:
Programming with solidity ^ version number 0.8.20
Implement the library called MerkleProof, which provides some functionality for verifying Merkle proofs.
Description of the error types to be implemented
MerkleProofInvalidMultiproof: this error type indicates that the multiproof is invalid.
Description of functions to be implemented
verify: This function is used to verify a given Merkle proof. It accepts an array of Merkle proofs, a root hash and a leaf node hash as arguments and returns a boolean value indicating the result of the verification.
verifyCalldata: This function is used to verify a given Merkle proof (using calldata). It accepts an array of Merkel proofs, root hash and leaf node hash as arguments and returns a boolean value indicating the result of the verification.
processProof: This function is used to process the Merkel proof and compute the root hash. It accepts an array of Merkel proofs and leaf node hashes as arguments and returns a value of type bytes32 indicating the calculated root hash.
processProofCalldata: This function is used to process the Merkle proof and compute the root hash (using calldata). It accepts an array of Merkle proofs and leaf node hashes as arguments and returns a value of type bytes32 representing the computed root hash.
multiProofVerify: This function is used to verify a given multiple Merkel proof. It accepts an array of Merkel proofs, an array of proof flags, an array of root hashes and leaf node hashes as arguments and returns a boolean value representing the result of the verification.
multiProofVerifyCalldata: This function is used to verify a given multiple Merkel proof (using calldata). It accepts an array of Merkel proofs, an array of proof flags, an array of root hashes and leaf node hashes as arguments and returns a Boolean value indicating the result of the verification.
processMultiProof: This function is used to process multiple Merkel proofs and compute the root hash. It accepts an array of Merkel proofs, an array of proof flags, and an array of leaf node hashes as arguments and returns a value of type bytes32 indicating the calculated root hash.
processMultiProofCalldata: This function is used to process multiple Merkel proofs and compute the root hash (using calldata). It accepts an array of Merkle proofs, an array of proof flags, and an array of leaf node hashes as arguments, and returns a value of type bytes32 representing the computed root hash.
_hashPair: This function is used to compute the combined hash of two hashes. It accepts two values of type bytes32 as arguments and returns a value of type bytes32 representing the calculated combined hash.
_efficientHash: This function is used to compute the combined hash of two hashes (the efficient way). It accepts two values of type bytes32 as arguments and returns a value of type bytes32 indicating the calculated combined hash.
Please give the contract code