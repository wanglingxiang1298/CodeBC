Generate smart contract code that meets the following requirements:
Programming with solidity ^ version number 0.8.20
Implement the abstract contract called ReentrancyGuard, which provides some functionality for preventing reentry attacks.
Description of constants to be implemented
NOT_ENTERED: This constant indicates that the reentry state has not been entered and has a value of 1.
ENTERED: This constant indicates that the reentry state has been entered and has a value of 2.
Variables to be implemented
_status: This variable is used to log the current reentry status.
Error types to be implemented
ReentrancyGuardReentrantCall(): This error type indicates a reentrant call.
Description of the constructor to be implemented
constructor(): This constructor is used to initialize the reentrant state to the inactive state.
Modifiers to be implemented
nonReentrant(): This modifier identifies a function as nonreentrant. It calls the _nonReentrantBefore function to check the reentrant state before the function is executed and the _nonReentrantAfter function to reset the reentrant state after the function is executed.
Description of the functions to be implemented
_nonReentrantBefore: This function is used to check the reentrant state before the function is executed. If the reentrant state is already entered, a ReentrancyGuardReentrantCall error will be triggered.
_nonReentrantAfter: This function is used to reset the reentrant state to not entered after the function is executed.
_reentrancyGuardEntered: This function is used to get the current reentrant state. It is a view function that returns a boolean value indicating whether or not it is currently in the reentrant state.
Please give the contract code
