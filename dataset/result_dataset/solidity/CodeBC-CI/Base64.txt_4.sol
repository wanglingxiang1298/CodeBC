pragma solidity ^0.8.20;
library Base64 {
    bytes constant TABLE = hex
    function encode(bytes memory data) public pure returns (string memory) {
        uint256 l       uint256 i;
        uint256 v;
        bytes memory result = new bytes(encoded.length);
        for (i = 0; i < encoded.length; i++) {
            v = encoded[i];
            if (v == 0x3D) {
                result[i] = 0x3D;
            } else {
                result[i] = TABLE[v];
            }
        }
        return string(result);
    }
}